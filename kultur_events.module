<?php

/**
 * @file
 * Code for the Kultur Events List feature.
 */

include_once 'kultur_events.features.inc';

/**
 * Implements hook_menu().
 */
function kultur_events_menu() {
  $items = array();

  $items['filter_categories'] = array(
    'page callback' => '_update_categories_callback',
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
  );
  $items['filter_categories/%'] = array(
      'page arguments' => array(1),
    ) + $items['filter_categories'];
  $items['filter_categories/%/%'] = array(
    'page arguments' => array(1, 2),
  ) + $items['filter_categories'];

  $items['filter_libraries'] = array(
    'page callback' => '_update_libraries_callback',
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
  );
  $items['filter_libraries/%'] = array(
    'page arguments' => array(1),
  ) + $items['filter_libraries'];
  $items['filter_libraries/%/%'] = array(
    'page arguments' => array(1, 2),
  ) + $items['filter_libraries'];

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function kultur_events_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'kultur_events' && $form_state['view']->current_display == 'kultur_event_list') {
    $form['og_group_ref_target_id_entityreference_filter']['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'kultur_events') . '/js/kultur_events.js',
      ),
    );

    $form['og_group_ref_target_id_entityreference_filter']['#prefix'] = '<div id="filter_libraries">';
    $form['og_group_ref_target_id_entityreference_filter']['#suffix'] = '</div>';
    $form['field_ding_event_category_tid']['#prefix'] = '<div id="filter_categories">';
    $form['field_ding_event_category_tid']['#suffix'] = '</div>';
  }
}

/**
 * Categories filtration callback.
 */
function _update_categories_callback($lib_id, $defaults) {
  // Preparing parameters from request.
  if (strpos($lib_id, ',')) {
    $libs = explode(',', $lib_id);
  }
  else {
    $libs = array($lib_id);
  }

  $commands = array();
  $categories = array();
  $raw_categories = array();
  $final = array();

  if (is_array($libs) && $lib_id != 'all') {
    foreach ($libs as $lib) {
      // Fetching node ids.
      $etids = db_select('og_membership', 'ogm')
        ->fields('ogm', array('etid'))
        ->condition('entity_type', 'node', '=')
        ->condition('field_name', 'og_group_ref', '=')
        ->condition('gid', $lib, '=')
        ->execute();

      $nodes = $etids->fetchAll();

      foreach ($nodes as $node) {
        $fetch_event_date = db_select('field_data_field_ding_event_date', 'fed')
          ->fields('fed', array('field_ding_event_date_value'))
          ->condition('entity_id', $node->etid, '=')
          ->execute()
          ->fetchField();

        $current_date = new DateTime();
        $now = $current_date->format('Y-m-d H:i:s');

        // Check active events.
        if ($fetch_event_date >= $now) {
          $query = db_select('field_data_field_ding_event_category', 'evcat')
            ->fields('evcat', array('field_ding_event_category_tid'))
            ->condition('entity_id', $node->etid, '=')
            ->execute();
          $cats = $query->fetchAllKeyed();
          $categories[] = array_keys($cats);
        }
      }

      $nodes_categories = array_values($categories);
      foreach ($nodes_categories as $nodes_category) {
        $raw_categories[] = $nodes_category[0];
      }

      // Getting non-empty and unique taxonomy terms tids.
      $raw_categories = array_unique(array_filter($raw_categories));
      foreach ($raw_categories as $raw_category) {
        $final[$raw_category] = $raw_category;
      }

      foreach ($final as $item) {
        $term = taxonomy_term_load($item);

        if (!empty($term)) {
          $options[$term->tid] = $term->name;
        }
      }
    }
  }
  else {
    $name = 'event_category';
    $vocabulary = taxonomy_vocabulary_machine_name_load($name);
    $tree = taxonomy_get_tree($vocabulary->vid);
    foreach ($tree as $term) {
      $options[$term->tid] = $term->name;
    }
  }

  // Rendering filters form.
  if (!empty($options)) {
    $form = array(
      '#form_id' => 'categories_filter',
    );
    $form_state = array('values' => array());

    $form['field_ding_event_category_tid'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => explode(',', $defaults),
    );

    // TODO: This form should be similar to the one generated from views BEF.
    $form_build = form_builder('kultunaut_categories_filters', $form, $form_state);
    $rendered_form = drupal_render($form_build);

    $commands[] = ajax_command_replace(
      '#filter_categories',
      render($rendered_form)
    );
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Libraries filtration callback.
 */
function _update_libraries_callback($categories, $defaults) {
  $domains = domain_domains();
  foreach ($domains as $domain) {
    if (strpos($domain['machine_name'], 'kultur') !== FALSE) {
      $did = $domain['domain_id'];
    }
  }

  if ($categories != 'all') {
    $query = db_select('og_membership', 'og')
      ->distinct();
    $query->join('field_data_field_ding_event_category', 'category', "category.field_ding_event_category_tid IN ($categories)");
    $query->join('node', 'n', 'og.gid = n.nid AND n.type = \'ding_library\'');
    $query->addField('og', 'gid', 'lid');
    $query->addField('n', 'title', 'title');
    $query->where('category.entity_id = og.etid');
  }
  else {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('n.type', 'ding_library');
  }
  if (!empty($did)) {
    $query->join('domain_access', 'da','n.nid = da.nid');
    $query->condition('da.gid', $did);
  }
  $query->condition('n.status', 1);
  $options = $query->execute()->fetchAllKeyed(0, 1);

  $commands = array();
  if (!empty($options)) {
    $form = array(
      '#form_id' => 'libraries_filter',
    );
    $form_state = array('values' => array());

    $form['og_group_ref_target_id_entityreference_filter'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => explode(',', $defaults),
    );

    // TODO: This form should be similar to the one generated from views BEF.
    $form_build = form_builder('kultunaut_libraries_filters', $form, $form_state);
    $rendered_form = drupal_render($form_build);

    $commands[] = ajax_command_replace(
      '#filter_libraries',
      render($rendered_form)
    );
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * Implements hook_views_query_alter().
 */
function kultur_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list_same_date') {
    $nid = arg(1);
    $node = node_load($nid);

    $current_node_date_value = $node->field_ding_event_date['und'][0]['value'];
    $date_object = date_create_from_format(
      'Y-m-d H:i:s',
      $current_node_date_value
    );
    $current_node_date = $date_object->format('Y-m-d');

    if ($current_node_date >= date('Y-m-d')) {
      $queried_date = $current_node_date;
    }
    else {
      $queried_date = date('Y-m-d');
    }

    $date_condition = array(
      'field' => "DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value, SEC_TO_TIME(7200)), '%Y-%m-%d') <= :node_between_date_filter AND DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value2, SEC_TO_TIME(7200)), '%Y-%m-%d') >= :node_between_date_filter",
      'value' => array(
        ':node_between_date_filter' => $queried_date,
      ),
      'operator' => 'formula',
    );

    // Condition for fetching events with same date as parent node.
    $query->where[1]['conditions'][] = $date_condition;
  }
  elseif ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list') {
    $date = arg(1);
    $operand = '=';
    if (!$date) {
      $operand = '>=';
      $date = date('Y-m-d');
    }

    $alias = $query->add_table('field_data_field_ding_event_date');
    $date_condition = array(
      'field' => "DATE_FORMAT(ADDTIME($alias.field_ding_event_date_value, SEC_TO_TIME(10800)), '%Y-%m-%d') $operand :field_data_field_ding_event_date_field_ding_event_date_value",
      'value' => array(
        ':field_data_field_ding_event_date_field_ding_event_date_value' => $date,
      ),
      'operator' => 'formula',
    );

    // Condition for fetching events with same date as parent node.
    $query->where[1]['conditions'][] = $date_condition;
  }
}

/**
 * Implements hook_views_pre_execute().
 *
 * Ensure that events tha are connected to more than one OG group is only
 * displayed once in related events on event page.
 */
function kultur_events_views_pre_execute(&$view) {
  if ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list_same_category') {
    $inner = $view->build_info['query'];
    $view->build_info['query'] = db_select($inner, 'inner_query')
      ->fields('inner_query')
      ->groupBy('nid');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @TODO: Make this processing more gracefully.
 */
function kultur_events_preprocess_views_view(&$variables) {
  $active_domain = FALSE;

  $current_domain = domain_get_domain();
  if ($current_domain['machine_name'] == 'kulturoen_dk') {
    $active_domain = TRUE;
  }

  // Hidding "Related events" view on Kulturoen node.
  if ($variables['view']->current_display == 'ding_event_list_same_tag' && $active_domain) {
    unset($variables['view']->result);
  }

  // Display or hide "Same date".
  if ($variables['view']->current_display == 'kultur_event_list_same_date') {
    $nid = array_pop($variables['view']->args);
    $entity = node_load($nid);
    $date_field = field_get_items('node', $entity, 'field_ding_event_date');

    $date = new DateObject(
      $date_field[0]['value'],
      $date_field[0]['timezone_db'],
      date_type_format($date_field[0]['date_type'])
    );

    $current_date = new DateTime();

    $timestamp = $date->format(DATE_FORMAT_UNIX);
    $node_date = $date->format('Y-m-d');
    $today = $current_date->format('Y-m-d');

    if ($node_date <= $today) {
      $timestamp = $current_date->getTimestamp();
    }

    $options = array(
      '#theme' => 'calendar_header',
      '#date' => array(
        'day' => format_date($timestamp, 'custom', 'j'),
        'month' => format_date($timestamp, 'custom', 'M'),
        'weekday' => format_date($timestamp, 'custom', 'D'),
        'year' => format_date($timestamp, 'custom', 'Y'),
      ),
      '#timestamp' => $timestamp,
      '#timezone' => '',
      '#today' => date('j.M.D') == date('j.M.D', $timestamp) ? TRUE : FALSE,
    );

    $variables['title'] = '<div class="event-list-leaf">';
    $variables['title'] .= theme('calendar_header', $options);
    $variables['title'] .= '</div>';

    if (!$active_domain) {
      unset($variables['view']->result);
    }
  }

  // Display or hide "Same category".
  if ($variables['view']->current_display == 'kultur_event_list_same_category' && !$active_domain) {
    unset($variables['view']->result);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function kultur_events_preprocess_calendar_header(&$variables) {
  $timestamp = $variables['timestamp'];

  $variables['date'] = array(
    'day' => format_date($timestamp, 'custom', 'j'),
    'month' => format_date($timestamp, 'custom', 'M'),
    'weekday' => format_date($timestamp, 'custom', 'D'),
    'year' => format_date($timestamp, 'custom', 'Y'),
  );

  $variables['today'] = date('j.M.D') == date('j.M.D', $timestamp) ? TRUE : FALSE;
}
