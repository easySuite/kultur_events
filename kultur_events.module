<?php

/**
 * @file
 * Code for the Kultur Events List feature.
 */

include_once 'kultur_events.features.inc';

/**
 * Implements hook_menu().
 */
function kultur_events_menu() {
  $items = [];

  $items['kultur/filter'] = [
    'page callback' => 'kultur_events_update_filter_callback',
    'access arguments' => ['access content'],
    'delivery callback' => 'ajax_deliver',
  ];
  $items['kultur/filter/%'] = [
      'page arguments' => [2],
    ] + $items['kultur/filter'];
  $items['kultur/filter/%/%'] = [
      'page arguments' => [2, 3],
    ] + $items['kultur/filter'];

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function kultur_events_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'kultur_events' && $form_state['view']->current_display == 'kultur_event_list') {
    $form['og_group_ref_target_id_entityreference_filter']['#attached'] = [
      'js' => [
        drupal_get_path('module', 'kultur_events') . '/js/kultur_events.js',
      ],
    ];
    $form['og_group_ref_target_id_entityreference_filter']['#options']['other'] = t('Other actors');

    $form['og_group_ref_target_id_entityreference_filter']['#prefix'] = '<div id="filter_libraries">';
    $form['og_group_ref_target_id_entityreference_filter']['#suffix'] = '</div>';
    $form['field_ding_event_category_tid']['#prefix'] = '<div id="filter_categories">';
    $form['field_ding_event_category_tid']['#suffix'] = '</div>';
  }
}

/**
 * Update filters based on the input form url.
 *
 * There can be 4 different situations:
 *   - all/all
 *   - X/all
 *   - all/X
 *   - X/X
 * Where X can be category/library id, concatenated  ids.
 * and without other identifier.
 *
 * @param string $lib_id
 *   Library ID.
 * @param string $cat_id
 *   Category ID.
 *
 * @return array
 *   AJAX commands.
 */
function kultur_events_update_filter_callback($lib_id, $cat_id) {
  $commands = [];
  if ($lib_id == 'all') {
    $name = 'event_category';
    $vocabulary = taxonomy_vocabulary_machine_name_load($name);
    $tree = taxonomy_get_tree($vocabulary->vid);
    foreach ($tree as $term) {
      $options[$term->tid] = $term->name;
    }
  }
  else {
    $libs = explode(',', $lib_id);

    if (strpos($lib_id, 'other') !== FALSE) {
      $other_queue = nodequeue_load_queue_by_name('other_kultur_libraries');
      $other_sub_queue = nodequeue_load_subqueues_by_queue($other_queue->qid);
      $other_sub_queue = reset($other_sub_queue);
      $other_libs = _kultur_calendar_get_libraries($other_sub_queue);
      $libs = array_merge($libs, $other_libs);
    }
    $options = kultur_event_load_related_categories($libs);
  }

  if (!empty($options)) {
    $form = [
      '#form_id' => 'filter_categories',
    ];
    $form['field_ding_event_category_tid'] = [
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => explode(',', $cat_id),
    ];

    $form_state = ['values' => []];
    $form_build = form_builder('kultunaut_categories_filters', $form, $form_state);
    $rendered_form = drupal_render($form_build);

    $commands[] = ajax_command_replace('#filter_categories', render($rendered_form)
    );
  }

  if ($cat_id == 'all') {
    $query = db_select('node', 'n');
    $query->fields('n', ['nid', 'title']);
    $query->condition('n.type', 'ding_library');
  }
  else {
    $query = db_select('og_membership', 'og')->distinct();
    $query->join('field_data_field_ding_event_category', 'category', "category.field_ding_event_category_tid IN ($cat_id)");
    $query->join('node', 'n', 'og.gid = n.nid AND n.type = \'ding_library\'');
    $query->addField('og', 'gid', 'lid');
    $query->addField('n', 'title', 'title');
    $query->where('category.entity_id = og.etid');
  }

  $domains = domain_domains();
  foreach ($domains as $domain) {
    if (strpos($domain['machine_name'], 'kultur') !== FALSE) {
      $did = $domain['domain_id'];
    }
  }
  if (!empty($did)) {
    $query->join('domain_access', 'da', 'n.nid = da.nid');
    $query->condition('da.gid', $did);
  }
  $query->condition('n.status', 1);
  $options = $query->execute()->fetchAllKeyed(0, 1);

  if (!empty($options)) {
    $form = [
      '#form_id' => 'filter_libraries',
    ];
    $form['og_group_ref_target_id_entityreference_filter'] = [
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => explode(',', $lib_id),
    ];

    $form_state = ['values' => []];
    $form_build = form_builder('kultunaut_libraries_filters', $form, $form_state);
    $rendered_form = drupal_render($form_build);

    $commands[] = ajax_command_replace('#filter_libraries', render($rendered_form)
    );
  }

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Load related categories to the set of libraries.
 *
 * @param array $libs
 *   Library ids.
 *
 * @return array
 *   Set of categories with the form: category id => term name.
 */
function kultur_event_load_related_categories($libs) {
  $options = [];
  $categories = [];
  $raw_categories = [];
  $final = [];
  foreach ($libs as $lib) {
    // Fetching node ids.
    $etids = db_select('og_membership', 'ogm')
      ->fields('ogm', ['etid'])
      ->condition('entity_type', 'node', '=')
      ->condition('field_name', 'og_group_ref', '=')
      ->condition('gid', $lib, '=')
      ->execute();

    $nodes = $etids->fetchAll();

    foreach ($nodes as $node) {
      $fetch_event_date = db_select('field_data_field_ding_event_date', 'fed')
        ->fields('fed', ['field_ding_event_date_value'])
        ->condition('entity_id', $node->etid, '=')
        ->execute()
        ->fetchField();

      $current_date = new DateTime();
      $now = $current_date->format('Y-m-d H:i:s');

      // Check active events.
      if ($fetch_event_date >= $now) {
        $query = db_select('field_data_field_ding_event_category', 'evcat')
          ->fields('evcat', ['field_ding_event_category_tid'])
          ->condition('entity_id', $node->etid, '=')
          ->execute();
        $cats = $query->fetchAllKeyed();
        $categories[] = array_keys($cats);
      }
    }

    $nodes_categories = array_values($categories);
    foreach ($nodes_categories as $nodes_category) {
      $raw_categories[] = $nodes_category[0];
    }

    // Getting non-empty and unique taxonomy terms tids.
    $raw_categories = array_unique(array_filter($raw_categories));
    foreach ($raw_categories as $raw_category) {
      $final[$raw_category] = $raw_category;
    }

    foreach ($final as $item) {
      $term = taxonomy_term_load($item);

      if (!empty($term)) {
        $options[$term->tid] = $term->name;
      }
    }
  }

  return $options;
}

/**
 * Implements hook_views_query_alter().
 */
function kultur_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list_same_date') {
    $nid = arg(1);
    $node = node_load($nid);

    $current_node_date_value = $node->field_ding_event_date['und'][0]['value'];
    $date_object = date_create_from_format('Y-m-d H:i:s', $current_node_date_value
    );
    $current_node_date = $date_object->format('Y-m-d');

    if ($current_node_date >= date('Y-m-d')) {
      $queried_date = $current_node_date;
    }
    else {
      $queried_date = date('Y-m-d');
    }

    $date_condition = [
      'field' => "DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value, SEC_TO_TIME(7200)), '%Y-%m-%d') <= :node_between_date_filter AND DATE_FORMAT(ADDTIME(field_data_field_ding_event_date.field_ding_event_date_value2, SEC_TO_TIME(7200)), '%Y-%m-%d') >= :node_between_date_filter",
      'value' => [
        ':node_between_date_filter' => $queried_date,
      ],
      'operator' => 'formula',
    ];

    // Condition for fetching events with same date as parent node.
    $query->where[1]['conditions'][] = $date_condition;
  }
  elseif ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list') {
    $date = arg(1);
    $operand = '=';
    if (!$date) {
      $operand = '>=';
      $date = date('Y-m-d');
    }

    $alias = $query->add_table('field_data_field_ding_event_date');
    $date_condition = [
      'field' => "DATE_FORMAT(ADDTIME($alias.field_ding_event_date_value, SEC_TO_TIME(10800)), '%Y-%m-%d') $operand :field_data_field_ding_event_date_field_ding_event_date_value",
      'value' => [
        ':field_data_field_ding_event_date_field_ding_event_date_value' => $date,
      ],
      'operator' => 'formula',
    ];

    // Condition for fetching events with same date as parent node.
    $query->where[1]['conditions'][] = $date_condition;

    // Filter events by other libraries.

    if ($_GET['og_group_ref_target_id_entityreference_filter']) {
      $queue = nodequeue_load_queue_by_name('kultur_libraries');
      $sub_queue = nodequeue_load_subqueues_by_queue($queue->qid);
      $sub_queue = reset($sub_queue);
      $libraries = _kultur_calendar_get_libraries($sub_queue);

      $arg = reset($_GET['og_group_ref_target_id_entityreference_filter']);
      if ($arg == 'other' || !in_array($arg, $libraries)) {
        $other_queue = nodequeue_load_queue_by_name('other_kultur_libraries');
        $other_sub_queue = nodequeue_load_subqueues_by_queue($other_queue->qid);
        $other_sub_queue = reset($other_sub_queue);
        $other_libraries = _kultur_calendar_get_libraries($other_sub_queue);

        $alias = $query->add_table('og_membership');
        $query->where[1]['conditions'][] = [
          'field' => "$alias.gid",
          'operator' => 'IN',
          'value' => $other_libraries,
        ];
      }
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 *
 * Ensure that events tha are connected to more than one OG group is only
 * displayed once in related events on event page.
 */
function kultur_events_views_pre_execute(&$view) {
  if ($view->name == 'kultur_events' && $view->current_display == 'kultur_event_list_same_category') {
    $inner = $view->build_info['query'];
    $view->build_info['query'] = db_select($inner, 'inner_query')
      ->fields('inner_query')
      ->groupBy('nid');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @TODO: Make this processing more gracefully.
 */
function kultur_events_preprocess_views_view(&$variables) {
  $active_domain = FALSE;

  $current_domain = domain_get_domain();
  if ($current_domain['machine_name'] == 'kulturoen_dk') {
    $active_domain = TRUE;
  }

  // Hidding "Related events" view on Kulturoen node.
  if ($variables['view']->current_display == 'ding_event_list_same_tag' && $active_domain) {
    unset($variables['view']->result);
  }

  // Display or hide "Same date".
  if ($variables['view']->current_display == 'kultur_event_list_same_date') {
    $nid = array_pop($variables['view']->args);
    $entity = node_load($nid);
    $date_field = field_get_items('node', $entity, 'field_ding_event_date');

    $date = new DateObject($date_field[0]['value'], $date_field[0]['timezone_db'], date_type_format($date_field[0]['date_type'])
    );

    $current_date = new DateTime();

    $timestamp = $date->format(DATE_FORMAT_UNIX);
    $node_date = $date->format('Y-m-d');
    $today = $current_date->format('Y-m-d');

    if ($node_date <= $today) {
      $timestamp = $current_date->getTimestamp();
    }

    $options = [
      '#theme' => 'calendar_header',
      '#date' => [
        'day' => format_date($timestamp, 'custom', 'j'),
        'month' => format_date($timestamp, 'custom', 'M'),
        'weekday' => format_date($timestamp, 'custom', 'D'),
        'year' => format_date($timestamp, 'custom', 'Y'),
      ],
      '#timestamp' => $timestamp,
      '#timezone' => '',
      '#today' => date('j.M.D') == date('j.M.D', $timestamp) ? TRUE : FALSE,
    ];

    $variables['title'] = '<div class="event-list-leaf">';
    $variables['title'] .= theme('calendar_header', $options);
    $variables['title'] .= '</div>';

    if (!$active_domain) {
      unset($variables['view']->result);
    }
  }

  // Display or hide "Same category".
  if ($variables['view']->current_display == 'kultur_event_list_same_category' && !$active_domain) {
    unset($variables['view']->result);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function kultur_events_preprocess_calendar_header(&$variables) {
  $timestamp = $variables['timestamp'];

  $variables['date'] = [
    'day' => format_date($timestamp, 'custom', 'j'),
    'month' => format_date($timestamp, 'custom', 'M'),
    'weekday' => format_date($timestamp, 'custom', 'D'),
    'year' => format_date($timestamp, 'custom', 'Y'),
  ];

  $variables['today'] = date('j.M.D') == date('j.M.D', $timestamp) ? TRUE : FALSE;
}
